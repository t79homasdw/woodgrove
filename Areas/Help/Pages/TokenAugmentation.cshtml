@page
@model woodgrovedemo.Help.Pages.TokenAugmentationModel
@{
    ViewData["Title"] = "Custom claim provider";
    Layout = "_Layout";
}



<h1 style="margin-top: 25px; margin-bottom: 25px;">Add claims to security tokens from a REST API</h1>

<div>
    <p>
        When a user authenticates to an application, a <a
            href="https://learn.microsoft.com/entra/identity-platform/custom-claims-provider-overview" target="_blank"
            class="link-dark link-offset-2">custom claims provider</a> can be used to add claims into the token.
        A custom claims provider is made up of a custom authentication extension that calls an external REST API to
        fetch claims from external systems. In this demo shows how you can add custom claims from <a
            href="https://github.com/microsoft/woodgrove-auth-api" target="_blank"
            class="link-dark link-offset-2"></a>Woodgrove REST API into security tokens.
        Including the loyaltyNumber, loyaltySince, and loyaltyTier claims.
        These claims return by a custom authentication extension REST API with some random values.
    </p>

    <div class="alert alert-light d-flex align-items-center" role="alert">
        <div>
            <i class="bi bi-github"></i> The <a target="_blank"
                href="https://github.com/microsoft/woodgrove-auth-api/blob/main/Controllers/OnTokenIssuanceStartController.cs">
                source code</a> for this demo is available in our
            <a href="https://github.com/microsoft/woodgrove-auth-api" target="_blank">Woodgrove authentication API
                GitHub
                repository</a>.
        </div>
    </div>
</div>

@await Html.PartialAsync("_HelpSelector.cshtml", 1)
<div class="tab-content wg-tab-content">
    <div class="tab-pane active" id="microsoftEntraAdminCenter" role="tabpanel"
        aria-labelledby="microsoftEntraAdminCenter-tab" tabindex="0">

        @await Html.PartialAsync("_StepsButtons.cshtml")

        <div class="bs-stepper vertical" id="Stepper">
            @await Html.PartialAsync("_Steps.cshtml", 15)

            <div class="bs-stepper-content">
                <div id="step-1" role="tabpanel" class="bs-stepper-pane fade" aria-labelledby="steppertrigger1">
                    @await Html.PartialAsync("_Prerequisites.cshtml")

                    <p>
                        To add a custom authentication extension, sign in to the <a href="https://entra.microsoft.com/"
                            target="_blank" class="link-dark link-offset-2">Microsoft Entra admin center</a>
                        and browse to <b>External Identities </b> > <b> Custom authentication extensions </b>.

                        Note, you can also browse to <b>Applications</b> > <b>Enterprise applications </b> > <b> Custom
                            authentication extensions </b>.
                        From the <b> Custom authentication extensions</b> page, select <b>Create a custom extension</b>.
                    </p>

                    <a href="#" class="pop" onclick="return false;">
                        <img class="img-fluid border"
                            src="~/Help/TokenAugmentation/Select-custom-authentication-extension.png">
                    </a>
                </div>

                <div id="step-2" role="tabpanel" class="bs-stepper-pane fade" aria-labelledby="steppertrigger2">
                    <p>
                        In <b>Basics</b>, select the <b>TokenIssuanceStart</b> event type and select <b>Next</b>.
                    </p>

                    <a href="#" class="pop" onclick="return false;">
                        <img class="img-fluid border"
                            src="~/Help/TokenAugmentation/New-custom-authentication-extension-step-1.png">
                    </a>
                </div>
                <div id="step-3" role="tabpanel" class="bs-stepper-pane fade" aria-labelledby="steppertrigger3">
                    In <b>Endpoint Configuration</b>, fill in the following properties:
                    <ul>
                        <li><b>Name</b> - A name for your custom authentication extension. For example, <i>
                                Add claims from customer relationship REST API</i>.</li>
                        <li><b>Target URL</b> - The URL of your REST API.</li>
                        <li><b>Timeout in milliseconds</b> - The maximum number of retries the API endpoint will be
                            called
                            in case of failure. If empty, will default to service default.</li>
                        <li><b>Maximum Retries</b> - The maximum number of retries the API endpoint will be called in
                            case
                            of failure. If empty, will default to service default..</li>
                        <li><b>Description</b> - A description for your custom authentication extensions.</li>
                    </ul>
                    To continue, select <b>Next</b>.

                    <a href="#" class="pop" onclick="return false;">
                        <img class="img-fluid border"
                            src="~/Help/TokenAugmentation/New-custom-authentication-extension-step-2.png">
                    </a>
                </div>

                <div id="step-4" role="tabpanel" class="bs-stepper-pane fade" aria-labelledby="steppertrigger4">
                    <p>
                        To ensure the communications between the custom authentication extension and your REST API are
                        secured appropriately, multiple security controls must be applied. The first step is to create
                        or
                        choose
                        an application that Microsoft Entra ID uses the OAuth 2.0 client credentials grant flow to
                        secure
                        the
                        call to your API endpoint.
                    </p>
                    <p>
                        If this is your first custom authentication extension (if not, scroll down), in <b>API
                            Authentication</b>, select the
                        <b>Create new app registration</b> option to create an app registration
                        that represents your REST API.
                        Give the app a <b>name</b>, for example <b>Custom authentication extension security app</b> and
                        select <b>Next</b>.
                    </p>

                    <a href="#" class="pop" onclick="return false;">
                        <img class="img-fluid border"
                            src="~/Help/TokenAugmentation/New-custom-authentication-extension-step-3-a.png">
                    </a>
                    <br>

                    <p style="padding-top: 20px;">
                        If you have already configured a custom authentication extension, in <b>API Authentication</b>,
                        select
                        the
                        <b>Select an existing app registration in this directory</b> option, and select the application
                        you
                        configured for the other custom authentication extensions.
                    </p>

                    <a href="#" class="pop" onclick="return false;">
                        <img class="img-fluid border"
                            src="~/Help/TokenAugmentation/New-custom-authentication-extension-step-3-b.png">
                    </a>
                </div>

                <div id="step-5" role="tabpanel" class="bs-stepper-pane fade" aria-labelledby="steppertrigger5">
                    <p>
                        In <b>Claims</b>, enter the attributes that you expect your custom authentication extension to
                        parse
                        from
                        your REST API and will be merged into the token. Then, to continue select <b>Next</b>.
                    </p>

                    <a href="#" class="pop" onclick="return false;">
                        <img class="img-fluid border"
                            src="~/Help/TokenAugmentation/New-custom-authentication-extension-step-4.png">
                    </a>
                </div>

                <div id="step-6" role="tabpanel" class="bs-stepper-pane fade" aria-labelledby="steppertrigger6">
                    <p>
                        Review your configuration and select <b>Create</b>, which registers the custom authentication
                        extension and the associated application registration
                        you selected or choose to create.
                    </p>

                    <a href="#" class="pop" onclick="return false;">
                        <img class="img-fluid border"
                            src="~/Help/TokenAugmentation/New-custom-authentication-extension-step-5.png">
                    </a>
                </div>

                <div id="step-7" role="tabpanel" class="bs-stepper-pane fade" aria-labelledby="steppertrigger7">
                    <p>
                        If earlier you choose the <b>Create new app registration</b> option, after your custom
                        authentication
                        extension is created, you need to grant permissions to the API.

                        Open the <b>Overview</b> page of your new custom authentication extension. Under <b>API
                            Authentication</b>, select <b>Grant permission</b>.

                        A new window opens, and once signed in, it requests permissions to receive custom authentication
                        extension HTTP requests. This allows the custom authentication extension to authenticate to your
                        API. Select <b>Accept</b>.
                    </p>
                    <p>
                        Take a note of the <b>App ID</b> under
                        API Authentication, as it will be needed when you configure your REST API access token
                        validation.
                    </p>

                    <a href="#" class="pop" onclick="return false;">
                        <img class="img-fluid border"
                            src="~/Help/TokenAugmentation/New-custom-authentication-extension-step-6.png">
                    </a>
                </div>

                <div id="step-8" role="tabpanel" class="bs-stepper-pane fade" aria-labelledby="steppertrigger8">
                    <p>
                        At this point your custom authentication extension is configured but is not associated with any
                        application.
                        In the next few steps you will configure your application to add the attributes
                        returned from the custom authentication extension mapped into the security tokens.
                        From the menu, select <b>App registrations</b> and select your application. In this example we
                        select the Woodgrove Groceries
                        application.
                    </p>

                    <a href="#" class="pop" onclick="return false;">
                        <img class="img-fluid border" src="~/Help/TokenAugmentation/Select-app.png">
                    </a>
                </div>

                <div id="step-9" role="tabpanel" class="bs-stepper-pane fade" aria-labelledby="steppertrigger9">
                    <p>
                        In your application registration, under <b>Manage</b>, select <b>Manifest</b>.
                        A web-based manifest editor opens, allowing you to edit
                        the manifest.
                        In the manifest, locate the <b>acceptMappedClaims</b> attribute, and set the value to
                        <b>true</b>.
                        Set the <b>accessTokenAcceptedVersion</b> to <b>2</b>.
                        Select <b>Save</b> to save the changes.
                    </p>

                    <a href="#" class="pop" onclick="return false;">
                        <img class="img-fluid border" src="~/Help/TokenAugmentation/App-manifest.png">
                    </a>
                </div>

                <div id="step-10" role="tabpanel" class="bs-stepper-pane fade" aria-labelledby="steppertrigger10">
                    <p>
                        To assign the custom authentication extension as a custom claims provider source, from the
                        app <b>Overview</b> page, select the link next to <b>Managed application in local directory</b>.
                        Note, you can also browse to <b>Enterprise applications</b>, then under <b>Manage</b>, select
                        <b>All
                            applications</b>, and then select your application from the list.
                    </p>

                    <a href="#" class="pop" onclick="return false;">
                        <img class="img-fluid border" src="~/Help/TokenAugmentation/Select-service-principal.png">
                    </a>
                </div>

                <div id="step-11" role="tabpanel" class="bs-stepper-pane fade" aria-labelledby="steppertrigger11">
                    <p>
                        From the menue, select <b>Single sign-on</b>. Then, under <b>Attributes & Claims</b>, select
                        <b>Edit</b>.
                    </p>

                    <a href="#" class="pop" onclick="return false;">
                        <img class="img-fluid border" src="~/Help/TokenAugmentation/Service-principal-sso.png">
                    </a>
                </div>


                <div id="step-12" role="tabpanel" class="bs-stepper-pane fade" aria-labelledby="steppertrigger12">
                    <p>
                        Expand the <b>Advanced settings</b> menu. Next to <b>Custom claims provider</b>, select
                        <b>Configure</b>.
                    </p>

                    <a href="#" class="pop" onclick="return false;">
                        <img class="img-fluid border" src="~/Help/TokenAugmentation/Configure-claims-provider.png">
                    </a>
                </div>


                <div id="step-13" role="tabpanel" class="bs-stepper-pane fade" aria-labelledby="steppertrigger13">
                    <p>
                        Expand the <b>Custom claims provider</b> drop-down box, and select the Token issuance event you
                        created
                        earlier. Select <b>Save</b> to save the changes.
                    </p>

                    <a href="#" class="pop" onclick="return false;">
                        <img class="img-fluid border" src="~/Help/TokenAugmentation/Select-custom-auth-extension.png">
                    </a>
                </div>

                <div id="step-14" role="tabpanel" class="bs-stepper-pane fade" aria-labelledby="steppertrigger14">
                    <p>
                        Next, assign the attributes from the custom claims provider, which should be issued into the
                        token
                        as claims:
                        Select <b>Add new claim</b> to add a new claim.
                    </p>

                    <a href="#" class="pop" onclick="return false;">
                        <img class="img-fluid border" src="~/Help/TokenAugmentation/Add-claims-1.png">
                    </a>
                </div>

                <div id="step-15" role="tabpanel" class="bs-stepper-pane fade" aria-labelledby="steppertrigger15">
                    <p>
                        Provide a <b>name</b> to the claim you want to be issued, for example loyaltyNumber.

                        Under Source, select <b>Attribute</b>, and choose <b>customClaimsProvider.loyaltyNumber</b> from
                        the
                        Source
                        attribute drop-down box. Note, the <b>name</b> can be differed from the source. For example, the
                        name can be
                        CustomerNumber, while the source must be one from the list.
                    </p>

                    <div class="alert alert-success" role="alert">
                        <h4 class="alert-heading">Well done!</h4>
                        <p>Your custom authentication extension is
                            configured, and
                            claims that it returns will be included in the access token for your application.</p>
                    </div>

                    <a href="#" class="pop" onclick="return false;">
                        <img class="img-fluid border" src="~/Help/TokenAugmentation/Add-claims-2.png">
                    </a>
                </div>
            </div>
        </div>

    </div>

    <div class="tab-pane" id="microsoftGraph" role="tabpanel" aria-labelledby="microsoftGraph-tab" tabindex="0">
        <h4 class="graph-header graph-header-space">Dependencies</h4>
        <ul>
            <li>Application registers</li>
        </ul>

        <h4 class="graph-header graph-header-space">1. Register custom authentication extension application</h4>
        <p>
            To <a
                href="https://learn.microsoft.com/en-us/graph/api/application-post-applications?view=graph-rest-1.0&tabs=http"
                target="_blank" class="link-dark link-offset-2">register a web application</a>, use the following
            Microsoft
            Graph. The name of the application will be <b>Custom authentication extension security app</b>.
        </p>
        <code
            style="color: black;"><span class="method">POST</span> https://graph.microsoft.com/v1.0/applications</code>

        <pre>
{
    "<span class="highlight">displayName</span>": "Custom authentication extension security app",
    "description": "Ensure the communications between the custom authentication extension and your REST API are secured",
    "signInAudience": "AzureADMyOrg",
        "tags": [
        "HideApp"
    ],
    "api": {
        "acceptMappedClaims": null,
        "requestedAccessTokenVersion": 2
    },
    "requiredResourceAccess": [
        {
            "resourceAppId": "00000003-0000-0000-c000-000000000000",
            "resourceAccess": [
                {
                    "id": "214e810f-fda8-4fd7-a475-29461495eb00",
                    "type": "Role"
                }
            ]
        }
    ]
}
        </pre>


        <h5 class="graph-header graph-header-space">1.1 Copy the application ID</h5>
        From the response, copy the value of the <b>appId</b>. For example:
        <pre>
{
    "@@odata.context": "https://graph.microsoft.com/v1.0/$metadata#applications/$entity",
    "id": "12345678-0000-0000-0000-000000000000",
    "<span class="highlight">appId</span>": "22222222-0000-0000-0000-000000000000",
    "displayName": "Custom authentication extension security app",
    "description": "Ensure the communications between the custom authentication extension and your REST API are secured",
    ...
}        
        </pre>

        <h5 class="graph-header graph-header-space">1.2 Update the application identifier URI</h5>
        <p>
            After you register you registered your application, <a
                href="https://learn.microsoft.com/en-us/graph/api/application-update?view=graph-rest-beta&tabs=http"
                target="_blank" class="link-dark link-offset-2">Update the application</a>'s' identifier URI.
            Replace the <b>{app-ID}</b> with the app ID from the previous call (not the object ID).
            Replace the <b>{REST-API-domain}</b> with your rest API domain name.

        </p>
        <code
            style="color: black;"><span class="method">PATCH</span> https://graph.microsoft.com/v1.0/applications(appId='<span class="highlight">{app-ID}</span>')</code>

        <pre>
{
    "identifierUris": [
        "api://<span class="highlight">{REST-API-domain}</span>/<span class="highlight">{app-ID}</span>"
    ]
}
        </pre>


        <a class="btn btn-success btn-sm" data-bs-toggle="collapse" href="#collapseExample1" role="button"
            aria-expanded="false" aria-controls="collapseExample1">
            Show example
        </a>
        <div class="collapse example" id="collapseExample1">
            <code
                style="color: black;"><span class="method">PATCH</span> https://graph.microsoft.com/v1.0/applications(appId='12345678-1234-1234-1234-000000000000')</code>

            <pre class="example">
{
       "identifierUris": [
        "api://auth-api.woodgrovedemo.com/12345678-1234-1234-1234-000000000000</span>"
    ]
}
            </pre>
        </div>

        <h5 class="graph-header graph-header-space">1.3 Create a service principal for your application</h5>
        <p>
            After you register you registered your application, <a
                href="https://learn.microsoft.com/en-us/graph/api/serviceprincipal-post-serviceprincipals?view=graph-rest-1.0&tabs=http"
                target="_blank" class="link-dark link-offset-2">create a service principal</a>. The following Microsoft
            Graph creates a service principal. Replace the <b>{app-ID}</b> with the app ID from the previous call
            (not the
            object ID).
        </p>
        <code
            style="color: black;"><span class="method">POST</span> https://graph.microsoft.com/v1.0/servicePrincipals</code>

        <pre>
{
    "appId": "<span class="highlight">{app-ID}</span>"
}
        </pre>


        <a class="btn btn-success btn-sm" data-bs-toggle="collapse" href="#collapseExample2" role="button"
            aria-expanded="false" aria-controls="collapseExample2">
            Show example
        </a>
        <div class="collapse example" id="collapseExample2">
            <code
                style="color: black;"><span class="method">POST</span> https://graph.microsoft.com/v1.0/servicePrincipals</code>

            <pre class="example">
{
    "appId": "12345678-1234-1234-1234-000000000000"
}
            </pre>
        </div>


        <h5 class="graph-header graph-header-space">1.4 Copy the service principal ID</h5>
        From the response, copy the value of the <b>id</b>. For example:
        <pre>
{
    "@@odata.context": "https://graph.microsoft.com/v1.0/$metadata#servicePrincipals/$entity",
    "<span class="highlight">id</span>": "77777777-0000-0000-0000-000000000000",
    "appDisplayName": "Custom authentication extension security app",
    "appDescription": "Ensure the communications between the custom authentication extension and your REST API are secured",
    "appId": "12345678-1234-1234-1234-000000000000",
}
        </pre>



        <h5 class="graph-header graph-header-space">1.5 Get the Microsoft Graph's service principal ID</h5>

        <p>Run the following GET request and cope the <b>id</b> from the response:</p>

        <code
            style="color: black;"><span class="method">GET</span> https://graph.microsoft.com/v1.0/servicePrincipals(appId='00000003-0000-0000-c000-000000000000')</code>

        <pre>
{
    "<span class="highlight">id</span>": "66666666-0000-0000-0000-000000000000"
    "appDisplayName": "Microsoft Graph",
    "appId": "00000003-0000-0000-c000-000000000000",
}
        </pre>

        <h5 class="graph-header graph-header-space">1.6 Consent to the required permissions</h5>
        <p>

            Since the tenant is a customer's tenant, the consumer users themselves can't consent to these permissions.
            You as the admin must <a
                href="https://learn.microsoft.com/en-us/graph/api/serviceprincipal-post-approleassignments?view=graph-rest-1.0&tabs=http"
                target="_blank" class="link-dark link-offset-2">consent to these permissions</a> on behalf of all the
            users in the tenant:

            Replace the <b>{service-principal-id}</b> with the service-principal ID you created in the previous step.
            Replace the <b>{graph-service-principal-id}</b> with the service-principal <b>id</b> you copied in the last
            step.
        </p>
        <p>
            Note, in the following JSON snippet, the <i>214e810f-fda8-4fd7-a475-29461495eb00</i> ID is the
            <b>CustomAuthenticationExtension.Receive.Payload</b> application role.
        </p>

        <code
            style="color: black;"><span class="method">POST</span> https://graph.microsoft.com/v1.0/servicePrincipals/<span class="highlight">{service-principal-id}</span>/appRoleAssignments</code>

        <pre>
{
    "principalId": "<span class="highlight">{service-principal-id}</span>",
    "resourceId": "<span class="highlight">{graph-service-principal-id}</span>",
    "appRoleId": "214e810f-fda8-4fd7-a475-29461495eb00"
}
        </pre>


        <h4 class="graph-header graph-header-space">2. Register a custom authentication extension</h4>

        <p>
            Next, you <a
                href="https://learn.microsoft.com/en-us/graph/api/identitycontainer-post-customauthenticationextensions?view=graph-rest-beta&tabs=http"
                target="_blank" class="link-dark link-offset-2">register the custom authentication extension</a>.
            You register the custom authentication extension by
            associating it with the <b>Custom authentication extension security app</b> you created, and to your
            REST API endpoint. Replace:
        <ul>
            <li><b>{app-ID}</b> with the app ID from the previous call <b>Custom authentication extension security
                    app</b>.</li>
            <li><b>{REST-API-domain}</b>with your rest API domain name</li>
            <li><b>{Endpoint-URL}</b> - with the RUL of your REST API endpoint</li>
            <li><b>claimsForTokenConfiguration</b> - Collection of attribute your REST API returns</li>
        </ul>
        </p>

        <code
            style="color: black;"><span class="method">POST</span> https://graph.microsoft.com/beta/identity/customAuthenticationExtensions</code>
        <pre>
{
    "@@odata.type": "#microsoft.graph.onTokenIssuanceStartCustomExtension",
    "displayName": " Add claims from customer relationship REST API",
    "description": "Returns the loyaltyNumber, loyaltySince, and loyaltyTier claims with some random values",
    "behaviorOnError": null,
    "authenticationConfiguration": {
        "@@odata.type": "#microsoft.graph.azureAdTokenAuthentication",
        "resourceId": "api://<span class="highlight">{REST-API-domain}</span>/<span class="highlight">{app-ID}</span>"
    },
    "endpointConfiguration": {
        "@@odata.type": "#microsoft.graph.httpRequestEndpoint",
        "targetUrl": "<span class="highlight">{Endpoint-URL}</span>"
    },
    "clientConfiguration": {
        "timeoutInMilliseconds": null,
        "maximumRetries": null
    },
    "<span class="highlight">claimsForTokenConfiguration</span>": [
        {
            "claimIdInApiResponse": "loyaltyNumber"
        },
        {
            "claimIdInApiResponse": "customRoles"
        },
        {
            "claimIdInApiResponse": "apiVersion"
        },
        {
            "claimIdInApiResponse": "correlationId"
        },
        {
            "claimIdInApiResponse": "loyaltySince"
        },
        {
            "claimIdInApiResponse": "loyaltyTier"
        }
    ]
}
        </pre>


        <a class="btn btn-success btn-sm" data-bs-toggle="collapse" href="#collapseExample3" role="button"
            aria-expanded="false" aria-controls="collapseExample3">
            Show example
        </a>
        <div class="collapse example" id="collapseExample3">
            <code
                style="color: black;"><span class="method">POST</span> https://graph.microsoft.com/beta/identity/customAuthenticationExtensions</code>

            <pre class="example">
{
    "@@odata.type": "#microsoft.graph.onTokenIssuanceStartCustomExtension",
    "displayName": " Add claims from customer relationship REST API",
    "description": "Returns the loyaltyNumber, loyaltySince, and loyaltyTier claims with some random values",
    "behaviorOnError": null,
    "authenticationConfiguration": {
        "@@odata.type": "#microsoft.graph.azureAdTokenAuthentication",
        "resourceId": "api://auth-api.woodgrovedemo.com/12345678-1234-1234-1234-000000000000"
    },
    "endpointConfiguration": {
        "@@odata.type": "#microsoft.graph.httpRequestEndpoint",
        "targetUrl": "https://auth-api.woodgrovedemo.com/OnTokenIssuanceStart"
    },
    "clientConfiguration": {
        "timeoutInMilliseconds": null,
        "maximumRetries": null
    },
    "claimsForTokenConfiguration": [
        {
            "claimIdInApiResponse": "loyaltyNumber"
        },
        {
            "claimIdInApiResponse": "customRoles"
        },
        {
            "claimIdInApiResponse": "apiVersion"
        },
        {
            "claimIdInApiResponse": "correlationId"
        },
        {
            "claimIdInApiResponse": "loyaltySince"
        },
        {
            "claimIdInApiResponse": "loyaltyTier"
        }
    ]
}

            </pre>
        </div>


        <h5 class="graph-header graph-header-space">2.1 Copy the custom authentication extension ID</h5>
        From the response, copy the value of the <b>id</b>. For example:
        <pre>
{
    "@@odata.context": "https://graph.microsoft.com/beta/$metadata#identity/customAuthenticationExtensions/$entity",
    "@@odata.type": "#microsoft.graph.onTokenIssuanceStartCustomExtension",
    "<span class="highlight">id</span>": "22222222-2222-3333-3333-444444444444",
    "displayName": " Add claims from customer relationship REST API",
    "description": "Returns the loyaltyNumber, loyaltySince, and loyaltyTier claims with some random values",
}
        </pre>

        <h5 class="graph-header graph-header-space">2.2 Create authentication event listener</h5>
        <p>
            After you register you registered your custom authentication extension, <a
                href="https://learn.microsoft.com/en-us/graph/api/identitycontainer-post-authenticationeventlisteners?view=graph-rest-beta&tabs=http"
                target="_blank" class="link-dark link-offset-2">create authentication event listener</a>.

            In the next JSON, replace:
        <ul>
            <li><b>{web-or-mobile-app-ID}</b> with your web or mobile application. Not the <b>Custom authentication
                    extension security
                    app</b>. It's a collection, you can add more apps as needed.</li>
            <li><b>{Custom-auth-extension-ID}</b> with the custom authentication extension you just created.</li>
        </ul>
        </p>
        <code
            style="color: black;"><span class="method">POST</span> https://graph.microsoft.com/beta/identity/authenticationEventListeners</code>

        <pre>
{
    "@@odata.type": "#microsoft.graph.onTokenIssuanceStartListener",
    "conditions": {
        "applications": {
            "includeAllApplications": false,
            "includeApplications": [
                {
                    "appId": "<span class="highlight">{web-or-mobile-app-ID}</span>"
                }
            ]
        }
    },
    "priority": 500,
    "handler": {
        "@@odata.type": "#microsoft.graph.onTokenIssuanceStartCustomExtensionHandler",
        "customExtension": {
            "id": "<span class="highlight">{Custom-auth-extension-ID}</span>"
        }
    }
}
        </pre>


        <a class="btn btn-success btn-sm" data-bs-toggle="collapse" href="#collapseExample2" role="button"
            aria-expanded="false" aria-controls="collapseExample2">
            Show example
        </a>
        <div class="collapse example" id="collapseExample2">
            <code
                style="color: black;"><span class="method">POST</span> https://graph.microsoft.com/beta/identity/authenticationEventListeners</code>

            <pre class="example">
{
    "@@odata.type": "#microsoft.graph.onTokenIssuanceStartListener",
    "conditions": {
        "applications": {
            "includeAllApplications": false,
            "includeApplications": [
                {
                    "appId": "722f9405-d07c-4980-baed-4717ce4ec710"
                },
                {
                    "appId": "c92b6a8a-d591-4234-bd51-6929d07d90aa"
                }
            ]
        }
    },
    "priority": 500,
    "handler": {
        "@@odata.type": "#microsoft.graph.onTokenIssuanceStartCustomExtensionHandler",
        "customExtension": {
            "id": "22222222-2222-3333-3333-444444444444"
        }
    }
}
            </pre>
        </div>

        <h5 class="graph-header graph-header-space">3. Update your applications' manifest</h5>
        <p>
            Configure your web or mobile application metadata's <b>acceptMappedClaims</b> attribute to <b>true</b>.
            Also, the <b>accessTokenAcceptedVersion</b> to <b>2</b>.
            Replace the <b>{app-ID}</b> with your web or mobile application. If you have more than one application,
            repeat this step.
        </p>
        <code
            style="color: black;"><span class="method">PATCH</span> https://graph.microsoft.com/v1.0/applications(appId='<span class="highlight">{app-ID}</span>')</code>

        <pre>
{
    "api": {
        "acceptMappedClaims": true,
        "requestedAccessTokenVersion": 2
    }
}
        </pre>
        <h4 class="graph-header graph-header-space">4. Assign a custom claims provider to your app</h4>

        For tokens to be issued with claims incoming from the custom authentication extension, you must <a
            href="https://learn.microsoft.com/en-us/entra/identity-platform/custom-extension-tokenissuancestart-configuration?tabs=microsoft-graph%2Cworkforce-tenant#step-3-assign-a-custom-claims-provider-to-your-app"
            target="_blank" class="link-dark link-offset-2">assign a custom claims provider to your application</a>.

    </div>

    <div class="tab-pane" id="entraGraphPowerShell" role="tabpanel" aria-labelledby="entraGraphPowerShell-tab"
        tabindex="0">
        Loading...
    </div>
</div>
