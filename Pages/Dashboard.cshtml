@page
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@model woodgrovedemo.Pages.DashboardModel
@{
  ViewData["Title"] = "Application user activity";
}
<h1 style="color: @Configuration["Web:BG_Color1"]; padding-bottom: 15px; padding-top: 15px;">@ViewData["Title"]</h1>
<div class="container">
  <code id="result">

    </code>
</div>

<div class="row">
  <div>
    The Application user activity (Preview) feature under Usage & insights provides data analytics on user activity and
    engagement for registered applications in your tenant. You can use this feature to view, query, and analyze user
    activity data in the Microsoft Entra admin center. This can help you uncover valuable insights that can aid
    strategic decisions and drive business growth. This demo uses Microsoft Graph API to query the data. You can find the source code <a href="https://github.com/microsoft/woodgrove-groceries/blob/main/Controllers/UserInsightsController.cs">here</a>.
  </div>
</div>
<div class="row" style="margin-top: 50px;">
  <div class="col-sm-4 text-center">
    <h4>Total users</h4>
    <h2 id="TotalUsers"></h2>
    This value represents the total number of active users in your tenant in <span id="TotalUsersDate"></span>.
  </div>

  <div class="col-sm-4 text-center">
    <h4>Monthly active users</h4>
    <h2 id="TotalMonthlyActiveUsers"></h2>
    This value represents the total number of users who signed in to your apps in <span
      id="TotalMonthlyActiveUsersDate"></span>.
  </div>

  <div class="col-sm-4 text-center">
    <h4>New users added</h4>
    <h2 id="TotalNewUsersAdded"></h2>
    This value represents the total number of new users added to your tenant in <span
      id="TotalNewUsersAddedDate"></span>.
    It reflects all users added through self-service sign-up or account creation.
  </div>
</div>

<h2>Daily user activity over time</h2>
<div class="text-center">
  <div id="DailyActiveUsersSpinner" class="spinner-border woodgrove-spinner" role="status"></div>
</div>
<canvas id="DailyActiveUsersChart"></canvas>

<div style="padding-top: 50px;">
  <h2>Monthly users over time</h2>
  A monthly active user (MAU) is a unique user that performs an authentication within a given month. A user that
  authenticates at least once within a given month is counted as one MAU.
  Authentications may include:

  Active, interactive sign in by the user. For example, sign-up or sign in, self-service password reset, or any type of
  user flow.
  Passive, non-interactive sign in such as single sign-on (SSO), or any type of token acquisition. For example,
  authorization code flow, token refresh, or resource owner password credentials flow.
  The graph below shows the monthly active users trend.

  <div class="text-center">
    <div id="MonthlyActiveUsersSpinner" class="spinner-border woodgrove-spinner" role="status"></div>
  </div>
  <canvas id="MonthlyActiveUsersChart"></canvas>
</div>

<div style="padding-top: 50px;">
  <h2>New users added over time</h2>
  The monthly new users graph can help you understanding the behavior of new users in your tenant. It's important for
  any business to determine the success of marketing campaigns, identify potential areas of improvement, and measure the
  effectiveness of the website in attracting and retaining new customers.

  <div class="text-center">
    <div id="NewUsersSpinner" class="spinner-border woodgrove-spinner" role="status"></div>
  </div>
  <canvas id="NewUsersChart"></canvas>
</div>

<h1 style="color: @Configuration["Web:BG_Color1"]; padding-bottom: 15px; padding-top: 85px;">Requests report</h1>



<h4>Monthly Requests</h4>
<h2 id="TotalRequests"></h2>
This value represents the total number of requests processed through sign-in and sign-up flows in <span
  id="TotalRequestsDate"></span>.
It includes all requests associated with conditional access policies, password reset flows, MFA, language customization,
and so on.
Refer to the detailed graphs for a breakdown.

<div class="text-center">
  <div id="RequestsSpinner" class="spinner-border woodgrove-spinner" role="status"></div>
</div>
<canvas id="RequestsChart"></canvas>

<h1 style="color: @Configuration["Web:BG_Color1"]; padding-bottom: 15px; padding-top: 85px;">Authentications report</h1>
<div>
  <h2>Monthly Authentications over time</h2>
  The authentications per day provides you with insights for all daily user authentications.

  <div class="text-center">
    <div id="MonthlyAuthenticationsSpinner" class="spinner-border woodgrove-spinner" role="status"></div>
  </div>
  <canvas id="MonthlyAuthenticationsChart">

  </canvas>

  <div style="padding-top: 80px;">
    The following graph shows the authentications requests across geographical regions. The country attribute allows you
    to
    investigate the authenticates trend even further. Note, unknown countries have been removed from the graph.
  </div>

  <div class="text-center">
    <div id="AuthenticationsPerCountrySpinner" class="spinner-border woodgrove-spinner" role="status"></div>
  </div>
  <canvas id="AuthenticationsPerCountryChart"></canvas>

</div>


<div style="padding-top: 50px;">
  <h2>Operation systems of authentications</h2>

  <div class="text-center">
    <div id="OperationSystemsOfAuthenticationRequestsSpinner" class="spinner-border woodgrove-spinner" role="status">
    </div>
  </div>
  <canvas id="OperationSystemsOfAuthenticationRequestsChart"></canvas>
</div>



<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>



@section Scripts {
  <script>

    /***** Operation systems of authentication requests *****/
    $.ajax({
      url: "/UserInsights/monthly/summary",
      success: function (result) {
        console.log("/UserInsights/monthly/summary")
        console.log(result)

        var items = {};

        for (var i = 0; i < result.value.length; i++) {
          if (items[result.value[i].os])
            items[result.value[i].os] = items[result.value[i].os] + result.value[i].authenticationRequests;
          else
            items[result.value[i].os] = result.value[i].authenticationRequests;
        }

        var labels = [];
        var data = [];
        var keys = Object.keys(items).sort();
        var count = 0;

        for (var i = 0; i < keys.length; i++) {
          labels.push(keys[i])
          data.push(items[keys[i]])

          count = count + items[keys[i]];
        }

        const ctx = document.getElementById('OperationSystemsOfAuthenticationRequestsChart');
        $("#OperationSystemsOfAuthenticationRequestsSpinner").hide();
        new Chart(ctx, {
          type: 'doughnut',
          data: {
            labels: labels,
            datasets: [{
              data: data
            }]
          },
          options: {
            responsive: true,
            plugins: {
              datalabels: {
                formatter: function (value, context) {
                  return context.chart.data.labels[
                    context.dataIndex
                  ];
                },
              },
              legend: {
                position: 'top',
              },
              title: {
                color: "",
                display: false,
                text: 'Operation systems of authentication requests'
              }
            }
          }
        });
      }
    });

    /***** Monthly Active users  *****/
    $.ajax({
      url: "/UserInsights/monthly/activeUsers",
      success: function (result) {
        console.log("/UserInsights/monthly/activeUsers")
        console.log(result)

        var items = {};

        for (var i = 0; i < result.value.length; i++) {
          if (items[result.value[i].factDate])
            items[result.value[i].factDate] = items[result.value[i].factDate] + result.value[i].count;
          else
            items[result.value[i].factDate] = result.value[i].count;
        }

        var labels = [];
        var data = [];
        var keys = Object.keys(items).sort();

        for (var i = 0; i < keys.length; i++) {
          labels.push(toShortDate(keys[i]))
          data.push(items[keys[i]])
        }

        // Hide the spinner
        $("#MonthlyActiveUsersSpinner").hide();

        // Get the total from the last day
        $("#TotalMonthlyActiveUsers").text(data[data.length - 1]);
        $("#TotalMonthlyActiveUsersDate").text(labels[labels.length - 1]);

        // Render the chart
        new Chart(
          document.getElementById('MonthlyActiveUsersChart'),
          {
            type: 'bar',
            data: {
              labels: labels,
              datasets: [
                {
                  label: 'Active users',
                  data: data,
                  pointStyle: 'circle',
                  pointRadius: 5,
                  pointHoverRadius: 15,
                  tension: 0.4,
                  backgroundColor: "@Configuration["Web:color-dark"]",
                  borderRadius: 4,
                  borderWidth: 2,
                      borderColor: "@Configuration["Web:color-dark"]"
                }
              ]
            },
            options: {
              responsive: true,
              scales: {
                y: {
                  beginAtZero: true
                }
              }
            }
          }
        );
      }
    });


    /**** Monthly Authentications over time ******/
    $.ajax({
      url: "/UserInsights/monthly/authentications",
      success: function (result) {
        console.log("/UserInsights/monthly/authentications")
        console.log(result)

        var items = {};

        for (var i = 0; i < result.value.length; i++) {
          if (items[result.value[i].factDate] == null) {
            items[result.value[i].factDate] = result.value[i].successCount;

          }
          else {
            items[result.value[i].factDate] = items[result.value[i].factDate] + result.value[i].successCount;
          }

        }

        var labels = [];
        var data = [];
        var keys = Object.keys(items); //.sort();

        var count = 0;

        for (var i = 0; i < keys.length; i++) {
          labels.push(toShortDate(keys[i]))
          data.push(items[keys[i]])
          count += items[keys[i]];
        }

        $("#MonthlyAuthenticationsSpinner").hide();

        new Chart(
          document.getElementById('MonthlyAuthenticationsChart'),
          {
            type: 'bar',
            data: {
              labels: labels,
              datasets: [
                {
                  label: 'Authentications ' + count.toLocaleString(),
                  data: data,
                  backgroundColor: "#EB332470",
                  borderRadius: 4,
                  borderWidth: 2,
                  borderColor: "#EB3324"
                }
              ]
            }
          }
        );
      }
    });


    /**** Authentications per counrty per day ******/
    $.ajax({
      url: "/UserInsights/daily/authentications",
      success: function (result) {

        var items = {};
        var getCountryNames = new Intl.DisplayNames(['en'], { type: 'region' });

        for (var i = 0; i < result.value.length; i++) {

          // Add only known countries
          if (result.value[i].country != "") {

            // Replace the country code by name
            var counrtyName = getCountryNames.of(result.value[i].country);

            // If key doesn't exist, add new one.
            if (items[counrtyName] == null) {
              items[counrtyName] = result.value[i].attemptsCount;
            }
            else {
              items[counrtyName] = items[counrtyName] + result.value[i].attemptsCount;
            }
          }
        }

        // Sort and convert the collection into two arrays
        var labels = [];
        var data = [];
        var keys = Object.keys(items).sort();

        for (var i = 0; i < keys.length; i++) {
          labels.push(keys[i])
          data.push(items[keys[i]])
        }

        $("#AuthenticationsPerCountrySpinner").hide();
        // Render the chart
        new Chart(
          document.getElementById('AuthenticationsPerCountryChart'),
          {
            type: 'line',
            data: {
              labels: labels,
              datasets: [
                {
                  label: 'Authentications per country per day',
                  data: data,
                  pointStyle: 'circle',
                  pointRadius: 5,
                  pointHoverRadius: 15
                }
              ]
            }
          }
        );
      }
    });


    /**** Monthly signUps ******/
    $.ajax({
      url: "/UserInsights/monthly/signUps",
      success: function (result) {
        console.log("/UserInsights/monthly/signUps")
        console.log(result)


        var items = {};

        for (var i = 0; i < result.value.length; i++) {
          if (items[result.value[i].factDate] == null) {
            items[result.value[i].factDate] = result.value[i].count;

          }
          else {
            items[result.value[i].factDate] = items[result.value[i].factDate] + result.value[i].count;
          }

        }

        var labels = [];
        var data = [];
        var keys = Object.keys(items).sort();

        for (var i = 0; i < keys.length; i++) {
          labels.push(toShortDate(keys[i]))
          data.push(items[keys[i]])
        }

        // Hide the spinner
        $("#NewUsersSpinner").hide();

        // Get the total from the last day
        $("#TotalNewUsersAdded").text(data[data.length - 1]);
        $("#TotalNewUsersAddedDate").text(labels[labels.length - 1]);

        // Render the chart
        new Chart(
          document.getElementById('NewUsersChart'),
          {
            type: 'bar',
            data: {
              labels: labels,
              datasets: [
                {
                  label: 'New users',
                  data: data,
                  backgroundColor: "#5C2D9170",
                  borderRadius: 4,
                  borderWidth: 2,
                  borderColor: "#5C2D91"
                }
              ]
            }
          }
        );
      }
    });



    /**** Total users ******/
    $.ajax({
      url: "/UserInsights/daily/userCount",
      success: function (result) {
        console.log("/UserInsights/daily/userCount")
        console.log(result)


        var items = {};

        for (var i = 0; i < result.value.length; i++) {
          if (items[result.value[i].factDate] == null) {
            items[result.value[i].factDate] = result.value[i].count;

          }
          else {
            items[result.value[i].factDate] = items[result.value[i].factDate] + result.value[i].count;
          }

        }

        var labels = [];
        var data = [];
        var keys = Object.keys(items).sort();

        for (var i = 0; i < keys.length; i++) {
          labels.push(keys[i])
          data.push(items[keys[i]])
        }

        // Hide the spinner
        $("#NewUsersSpinner").hide();

        // Get the total from the last day
        $("#TotalUsers").text(data[data.length - 1]);
        $("#TotalUsersDate").text(labels[labels.length - 1]);

        return
        // Render the chart
        new Chart(
          document.getElementById('NewUsersChart'),
          {
            type: 'bar',
            data: {
              labels: labels,
              datasets: [
                {
                  label: 'New users per month',
                  data: data
                }
              ]
            }
          }
        );
      }
    });




    /***** Monthly authentications  *****/
    $.ajax({
      url: "/UserInsights/monthly/requests",
      success: function (result) {
        console.log("/UserInsights/monthly/requests")
        console.log(result)

        var items = {};

        for (var i = 0; i < result.value.length; i++) {
          if (items[result.value[i].factDate])
            items[result.value[i].factDate] = items[result.value[i].factDate] + result.value[i].count;
          else
            items[result.value[i].factDate] = result.value[i].count;
        }

        var labels = [];
        var data = [];
        var keys = Object.keys(items).sort();
        var count = 0;

        for (var i = 0; i < result.value.length; i++) {
          labels.push(toShortDate(result.value[i].factDate))
          data.push(result.value[i].requestCount)

          count += result.value[i].requestCount;
        }

        // Hide the spinner
        $("#RequestsSpinner").hide();

        // Get the total from the last day
        $("#TotalRequests").text(data[data.length - 1].toLocaleString());
        $("#TotalRequestsDate").text(labels[labels.length - 1]);

        // Render the chart
        new Chart(
          document.getElementById('RequestsChart'),
          {
            type: 'line',
            data: {
              labels: labels,
              datasets: [
                {
                  label: 'Total requests ' + count.toLocaleString(),
                  data: data,
                  pointStyle: 'circle',
                  pointRadius: 5,
                  pointHoverRadius: 15,
                  tension: 0.4
                }
              ]
            },
            options: {
              responsive: true,
              scales: {
                y: {
                  beginAtZero: true
                }
              }
            }
          }
        );
      }
    });

    /***** Daily active users  *****/
    $.ajax({
      url: "/UserInsights/daily/activeUsers",
      success: function (activeResult) {
        console.log("/UserInsights/daily/activeUsers")
        console.log(activeResult)

        /***** Daily inactive users  *****/
        $.ajax({
          url: "/UserInsights/daily/inactiveUsers",
          success: function (inactiveResult) {
            console.log("/UserInsights/daily/inactiveUsers")
            console.log(inactiveResult)


            var labels = [];
            var activeData = [];

            var activeCount = 0;

            // Iterate throut the active result
            for (var i = 0; i < activeResult.value.length; i++) {
              labels.push(toLongDate(activeResult.value[i].factDate))
              activeData.push(activeResult.value[i].count)

              activeCount += activeResult.value[i].count;
            }


            var inactiveData = [];
            var inactiveCount = 0;
            var cDate;
            var nDate;

            for (var i = 0; i < inactiveResult.value.length; i++) {
              cDate = new Date(inactiveResult.value[i].factDate);
              if ((i + 1) < inactiveResult.value.length) {
                // Get the next date
                nDate = new Date(inactiveResult.value[i + 1].factDate);

                // Iterate through the missing dates. 
                // Start with current date until it reaches the next nDate
                for (var d = cDate; d < nDate; d.setDate(d.getDate() + 1)) {
                  //labels.push(toLongDate(d));
                  inactiveData.push(inactiveResult.value[i].inactive1DayCount)
                }

              }
              else {
                //labels.push(toLongDate(cDate));
                inactiveData.push(inactiveResult.value[i].inactive1DayCount)
              }

              inactiveCount += inactiveResult.value[i].inactive1DayCount;
            }

            // Hide the spinner
            $("#DailyActiveUsersSpinner").hide();

            // Render the chart
            new Chart(
              document.getElementById('DailyActiveUsersChart'),
              {
                type: 'line',
                data: {
                  labels: labels,
                  datasets: [
                    {
                      label: 'Active users (' + activeCount.toLocaleString() + ")",
                      data: activeData,
                      pointStyle: 'circle',
                      pointRadius: 1,
                      pointHoverRadius: 7,
                      tension: 0.4,
                      backgroundColor: "#0078D470",
                      borderRadius: 4,
                      borderWidth: 2,
                      borderColor: "#0078D4"
                    },
                    {
                      label: 'Inactive users (' + inactiveCount.toLocaleString() + ")",
                      data: inactiveData,
                      pointStyle: 'circle',
                      pointRadius: 1,
                      pointHoverRadius: 7,
                      tension: 0.4,
                      backgroundColor: "#E3008C70",
                      borderRadius: 4,
                      borderWidth: 2,
                      borderColor: "#E3008C"
                    }
                  ]
                },
                options: {
                  responsive: true,
                  scales: {
                    y: {
                      beginAtZero: true
                    }
                  }
                }
              }
            );
          }
        });


      }
    });

    function toShortDate(date) {
      const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

      const d = new Date(date);
      return months[d.getMonth()] + " " + d.getFullYear();
    }

    function toLongDate(date) {
      const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];

      const d = new Date(date);
      return d.getDate() + " " + months[d.getMonth()] + ", " + d.getFullYear();
    }

  </script>
}
