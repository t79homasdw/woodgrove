@page
@using Microsoft.AspNetCore.Authentication.OpenIdConnect
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@model woodgrovedemo.Pages.TokenModel
@{
}
<h1 style="color: @Configuration["Web:BG_Color1"]; padding-bottom: 15px; padding-top: 15px;">Your claims and access token</h1>

<div class="container">

    @if (!string.IsNullOrEmpty(@Model.ActAs))
    {
        <div class="alert alert-warning" style="margin-top: 20px;" role="alert">
            <h4 class="alert-heading">Delegation</h4>
            <i class="bi bi-exclamation-diamond-fill"></i> Please be aware that you are granted the
            authority to act on behalf '@Model.ActAs'. Check the value of the 'act_as' claim.
        </div>
    }

    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Claim</th>
                <th scope="col">Value</th>
            </tr>
        </thead>
        <tbody>


            @foreach (var claim in User.Claims)
            {
                if (claim.Type != "AuthScheme")
                {
                    <tr>
                        <td scope="row" style="color: @Configuration["Web:BG_Color5"];">@claim.Type</td>
                        <td class="text-break">@claim.Value</td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <div style="padding-top: 1px; padding-bottom: 20px;">
        @if (!string.IsNullOrEmpty(@Model.IdToken))
        {
            <ul>
                <li>The <a href='https://jwt.ms/#access_token=@Model.IdToken.Replace("Bearer ", "")'
                        target="_blank">https://jwt.ms</a> shows the ID token.</li>
                <li>@Model.IdTokenExpiresIn</li>
                <li>Auth scheme: @Model.AuthScheme</li>
            </ul>
        }
    </div>

    @if (Model.AuthScheme == OpenIdConnectDefaults.AuthenticationScheme)
    {
        <h2 style="color: @Configuration["Web:BG_Color1"];">Access token to call web API</h2>
        <div>

            @if (!string.IsNullOrEmpty(@Model.AccessToken))
            {
                <span>The <a href='https://jwt.ms/#access_token=@Model.AccessToken.Replace("Bearer ", "")'
                        target="_blank">https://jwt.ms</a> shows the access token used to call a web API (Account API).</span>
            }

            @if (!string.IsNullOrEmpty(@Model.AccessTokenError))
            {
                <div class="alert alert-danger" role="alert">
                    @Model.AccessTokenError
                </div>
            }

            <br>&nbsp;<br>


            @if (!string.IsNullOrEmpty(@Model.DownstreamAccessToken))
            {
                <span>
                    For the <b>Account </b>API to make authenticated requests to the downstream <b>Payment</b> API, it needs an
                    access token for different audience and another set of scopes (permissions). To get that access token, the
                    <b>Account</b> API utilizes the OAuth 2.0 On-Behalf-Of flow.

                </span>
                <span>The <a href='https://jwt.ms/#access_token=@Model.DownstreamAccessToken.Replace("Bearer ", "")'
                        target="_blank">https://jwt.ms</a> shows the access token acquired by the <b>Account</b> API to call the
                    downstream <b>Payment</b> API.</span>
            }

            @if (!string.IsNullOrEmpty(@Model.DownstreamAccessTokenError))
            {
                <div class="alert alert-danger" role="alert">
                    @Model.DownstreamAccessTokenError
                </div>
            }

        </div>
    }

    <a class="btn header-button" role="button" href="/SignIn?handler=TokenSignin"><i class="bi bi-person"></i>
        Sign-in with SSO</a>
</div>
